{"ast":null,"code":"var _jsxFileName = \"/home/gabriel/projetos/sd-017-project-recipes-app/src/components/SearchBar.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport Button from 'react-bootstrap/Button';\nimport ToggleButtonGroup from 'react-bootstrap/ToggleButtonGroup';\nimport ToggleButton from 'react-bootstrap/ToggleButton';\nimport fetchData from '../services/fetchData';\nimport { MAX_RECIPIES } from '../helpers/constants';\nimport AppContext from '../context/context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SearchBar() {\n  _s();\n\n  const {\n    setFoodData,\n    setDrinkData\n  } = useContext(AppContext);\n  const [search, setSearch] = useState('');\n  const [searchType, setSearchType] = useState('');\n  const [data, setData] = useState([]);\n  const history = useHistory();\n  const {\n    location: {\n      pathname\n    }\n  } = history;\n\n  const handleSearch = async () => {\n    if (searchType === 'f' && search.length > 1) {\n      global.alert('Your search must have only 1 (one) character');\n    } else {\n      const APIData = await fetchData(search, searchType, pathname);\n      setData(APIData);\n    }\n\n    setSearch('');\n    setSearchType('');\n  };\n\n  useEffect(() => {\n    if (data === null) {\n      return global.alert('Sorry, we haven\\'t found any recipes for these filters.');\n    }\n\n    if (data !== null && data.length === 1) {\n      const id = Object.values(data[0])[0];\n      return history.push(`${pathname}/${id}`);\n    }\n\n    if (data !== null && data.length > 1) {\n      const filterData = data.filter((item, index) => index < MAX_RECIPIES);\n      return pathname === '/foods' ? setFoodData(filterData) : setDrinkData(filterData);\n    }\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      \"data-testid\": \"search-input\",\n      type: \"text\",\n      value: search,\n      onChange: e => setSearch(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ToggleButtonGroup, {\n      name: \"options\",\n      children: [/*#__PURE__*/_jsxDEV(ToggleButton, {\n        value: \"i\",\n        \"data-testid\": \"ingredient-search-radio\",\n        type: \"radio\",\n        name: \"options\",\n        checked: false,\n        onChange: e => setSearchType(e.target.value),\n        children: \"Ingredient\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ToggleButton, {\n        value: \"s\",\n        \"data-testid\": \"name-search-radio\",\n        type: \"radio\",\n        name: \"options\",\n        checked: false,\n        onChange: e => setSearchType(e.target.value),\n        children: \"Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ToggleButton, {\n        value: \"f\",\n        \"data-testid\": \"first-letter-search-radio\",\n        type: \"radio\",\n        name: \"options\",\n        checked: false,\n        onChange: e => setSearchType(e.target.value),\n        children: \"First Letter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      \"data-testid\": \"exec-search-btn\",\n      type: \"submit\",\n      onClick: handleSearch,\n      children: \"Search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SearchBar, \"40ZkJ1gQhc+UVMvfSx2muGAfKQM=\", false, function () {\n  return [useHistory];\n});\n\n_c = SearchBar;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchBar\");","map":{"version":3,"sources":["/home/gabriel/projetos/sd-017-project-recipes-app/src/components/SearchBar.jsx"],"names":["React","useState","useEffect","useContext","useHistory","Button","ToggleButtonGroup","ToggleButton","fetchData","MAX_RECIPIES","AppContext","SearchBar","setFoodData","setDrinkData","search","setSearch","searchType","setSearchType","data","setData","history","location","pathname","handleSearch","length","global","alert","APIData","id","Object","values","push","filterData","filter","item","index","e","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport Button from 'react-bootstrap/Button';\nimport ToggleButtonGroup from 'react-bootstrap/ToggleButtonGroup';\nimport ToggleButton from 'react-bootstrap/ToggleButton';\nimport fetchData from '../services/fetchData';\nimport { MAX_RECIPIES } from '../helpers/constants';\nimport AppContext from '../context/context';\n\nexport default function SearchBar() {\n  const { setFoodData, setDrinkData } = useContext(AppContext);\n  const [search, setSearch] = useState('');\n  const [searchType, setSearchType] = useState('');\n  const [data, setData] = useState([]);\n  const history = useHistory();\n  const { location: { pathname } } = history;\n\n  const handleSearch = async () => {\n    if (searchType === 'f' && search.length > 1) {\n      global.alert('Your search must have only 1 (one) character');\n    } else {\n      const APIData = await fetchData(search, searchType, pathname);\n      setData(APIData);\n    }\n    setSearch('');\n    setSearchType('');\n  };\n\n  useEffect(() => {\n    if (data === null) {\n      return global.alert('Sorry, we haven\\'t found any recipes for these filters.');\n    } if (data !== null && data.length === 1) {\n      const id = Object.values(data[0])[0];\n      return history.push(`${pathname}/${id}`);\n    } if (data !== null && data.length > 1) {\n      const filterData = data.filter((item, index) => index < MAX_RECIPIES);\n      return (pathname === '/foods') ? setFoodData(filterData) : setDrinkData(filterData);\n    }\n  }, [data]);\n\n  return (\n    <div>\n      <input\n        data-testid=\"search-input\"\n        type=\"text\"\n        value={ search }\n        onChange={ (e) => setSearch(e.target.value) }\n      />\n      <ToggleButtonGroup name=\"options\">\n        <ToggleButton\n          value=\"i\"\n          data-testid=\"ingredient-search-radio\"\n          type=\"radio\"\n          name=\"options\"\n          checked={ false }\n          onChange={ (e) => setSearchType(e.target.value) }\n        >\n          Ingredient\n        </ToggleButton>\n        <ToggleButton\n          value=\"s\"\n          data-testid=\"name-search-radio\"\n          type=\"radio\"\n          name=\"options\"\n          checked={ false }\n          onChange={ (e) => setSearchType(e.target.value) }\n        >\n          Name\n        </ToggleButton>\n        <ToggleButton\n          value=\"f\"\n          data-testid=\"first-letter-search-radio\"\n          type=\"radio\"\n          name=\"options\"\n          checked={ false }\n          onChange={ (e) => setSearchType(e.target.value) }\n        >\n          First Letter\n        </ToggleButton>\n      </ToggleButtonGroup>\n      <Button\n        data-testid=\"exec-search-btn\"\n        type=\"submit\"\n        onClick={ handleSearch }\n      >\n        Search\n      </Button>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}