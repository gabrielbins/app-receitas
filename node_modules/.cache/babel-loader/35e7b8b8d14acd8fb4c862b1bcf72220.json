{"ast":null,"code":"var _jsxFileName = \"/home/gabrielbins/Documentos/repositorio github/app-receitas/src/context/Provider.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport AppContext from './context';\nimport callFetchCategory from '../helpers/callFetchCategory';\nimport callFetchInicialData from '../helpers/callFetchInicialData';\nimport callFetchRandomRecipe from '../helpers/callFetchRandomRecipe';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Provider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [foodData, setFoodData] = useState([]);\n  const [drinkData, setDrinkData] = useState([]);\n  const [foodCategory, setFoodCategory] = useState([]);\n  const [drinkCategory, setDrinkCategory] = useState([]);\n  const [foodRandom, setFoodRandom] = useState([]);\n  const [drinkRandom, setDrinkRandom] = useState([]);\n  useEffect(() => {\n    callFetchInicialData(setFoodData, setDrinkData);\n    callFetchCategory(setFoodCategory, setDrinkCategory);\n    callFetchRandomRecipe(setFoodRandom, setDrinkRandom);\n  }, []);\n  const context = {\n    foodData,\n    setFoodData,\n    drinkData,\n    setDrinkData,\n    foodCategory,\n    drinkCategory,\n    foodRandom,\n    setFoodRandom,\n    drinkRandom,\n    setDrinkRandom\n  };\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: context,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Provider, \"ymUXCxPZ6RBC0dRnxjyIsBjf/Ro=\");\n\n_c = Provider;\nProvider.propTypes = {\n  children: PropTypes.node.isRequired\n};\nexport default Provider;\n\nvar _c;\n\n$RefreshReg$(_c, \"Provider\");","map":{"version":3,"sources":["/home/gabrielbins/Documentos/repositorio github/app-receitas/src/context/Provider.js"],"names":["React","useEffect","useState","PropTypes","AppContext","callFetchCategory","callFetchInicialData","callFetchRandomRecipe","Provider","children","foodData","setFoodData","drinkData","setDrinkData","foodCategory","setFoodCategory","drinkCategory","setDrinkCategory","foodRandom","setFoodRandom","drinkRandom","setDrinkRandom","context","propTypes","node","isRequired"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,UAAP,MAAuB,WAAvB;AACA,OAAOC,iBAAP,MAA8B,8BAA9B;AACA,OAAOC,oBAAP,MAAiC,iCAAjC;AACA,OAAOC,qBAAP,MAAkC,kCAAlC;;;AAEA,MAAMC,QAAQ,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AACjC,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACU,SAAD,EAAYC,YAAZ,IAA4BX,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACY,YAAD,EAAeC,eAAf,IAAkCb,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACc,aAAD,EAAgBC,gBAAhB,IAAoCf,QAAQ,CAAC,EAAD,CAAlD;AACA,QAAM,CAACgB,UAAD,EAAaC,aAAb,IAA8BjB,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACkB,WAAD,EAAcC,cAAd,IAAgCnB,QAAQ,CAAC,EAAD,CAA9C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdK,IAAAA,oBAAoB,CAACK,WAAD,EAAcE,YAAd,CAApB;AACAR,IAAAA,iBAAiB,CAACU,eAAD,EAAkBE,gBAAlB,CAAjB;AACAV,IAAAA,qBAAqB,CAACY,aAAD,EAAgBE,cAAhB,CAArB;AACD,GAJQ,EAIN,EAJM,CAAT;AAMA,QAAMC,OAAO,GAAG;AACdZ,IAAAA,QADc;AAEdC,IAAAA,WAFc;AAGdC,IAAAA,SAHc;AAIdC,IAAAA,YAJc;AAKdC,IAAAA,YALc;AAMdE,IAAAA,aANc;AAOdE,IAAAA,UAPc;AAQdC,IAAAA,aARc;AASdC,IAAAA,WATc;AAUdC,IAAAA;AAVc,GAAhB;AAaA,sBACE,QAAC,UAAD,CAAY,QAAZ;AAAqB,IAAA,KAAK,EAAGC,OAA7B;AAAA,cACGb;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAhCD;;GAAMD,Q;;KAAAA,Q;AAkCNA,QAAQ,CAACe,SAAT,GAAqB;AACnBd,EAAAA,QAAQ,EAAEN,SAAS,CAACqB,IAAV,CAAeC;AADN,CAArB;AAIA,eAAejB,QAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport AppContext from './context';\nimport callFetchCategory from '../helpers/callFetchCategory';\nimport callFetchInicialData from '../helpers/callFetchInicialData';\nimport callFetchRandomRecipe from '../helpers/callFetchRandomRecipe';\n\nconst Provider = ({ children }) => {\n  const [foodData, setFoodData] = useState([]);\n  const [drinkData, setDrinkData] = useState([]);\n  const [foodCategory, setFoodCategory] = useState([]);\n  const [drinkCategory, setDrinkCategory] = useState([]);\n  const [foodRandom, setFoodRandom] = useState([]);\n  const [drinkRandom, setDrinkRandom] = useState([]);\n\n  useEffect(() => {\n    callFetchInicialData(setFoodData, setDrinkData);\n    callFetchCategory(setFoodCategory, setDrinkCategory);\n    callFetchRandomRecipe(setFoodRandom, setDrinkRandom);\n  }, []);\n\n  const context = {\n    foodData,\n    setFoodData,\n    drinkData,\n    setDrinkData,\n    foodCategory,\n    drinkCategory,\n    foodRandom,\n    setFoodRandom,\n    drinkRandom,\n    setDrinkRandom,\n  };\n\n  return (\n    <AppContext.Provider value={ context }>\n      {children}\n    </AppContext.Provider>\n  );\n};\n\nProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Provider;\n"]},"metadata":{},"sourceType":"module"}